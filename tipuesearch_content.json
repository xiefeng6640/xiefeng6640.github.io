{"pages":[{"url":"http://xiefeng6640.github.io/articles/xue-xi-bi-ji/2015/build_blog.html","text":"1. 前言 Git Git是一个开源免费的版本管理系统，与采用集中式管理的SVN不同，它基于分布式管理。 GitHub GitHub是一个远程仓库，用于托管各种Git库，并提供管理界面浏览代码，很多开源项目都托管在GitHub上，可以方便他人参与到该项目中，同时也可以分享自己的项目。 Python Python是一种当前十分流行的解释性编程语言，它的执行效率低于C语言，但随着当今的计算机的计算速度越来越快，执行效率的差异性已经没那么明显，Python的抽象程度很高，可以很简洁地实现所需要的功能。 Pelican Pelican是一个托管在GitHub上的开源项目，可以到 这里 clone到本地，Pelican是基于Python编写的，用于生成静态网页，支持 reStructuredText or Markdown。 Markdwon Markdwon是一种轻量级的标记语言，与HTML相比，它使用了更容易为人们所记忆理解的符号来实现文本编辑，通过不同的转换工具，可以将Markdown转换成HTML、LaTeX，Docbook等，使用它来写博客是一件很流行、很有意思的尝试。 在Windows使用 Markdownpad ，也可以使用一些在线编辑工具，例如 Cmd Markdown ， mahua , Daring Fireball: Markdown Web Dingus 等， 这些工具都有预览功能；Linux下可以使用 ReText 。 2. 环境安装 2.1 Git安装 Windows下到 这里 下载安装包，会得到一个类似Linux的终端命令界面，可以通过它运行Git相关的命令。 2.2 Pelican、Markdown安装 Pelican的安装是通过python下软件包安装工具pip实现，在Windows环境下安装Python的时候勾选即可。 代码如下： pip install pelican pip install markdown 3. 生成博客 cd f: #在Git bash下进入F盘 mkdir blog #新建存放博客文件的目录 cd blog pelican-quickstart #进入目录，进入pelican快速配置模式，配置完成后会生成一个配置文件，即使一开始觉得配置有误也没关系，后面还可以继续修改的。 //查看当前目录结构 |-- content # 存放博客文章内容 |-- develop_server.sh # 用于开启测试服务器 |-- Makefile # 自动生成博客的makefile |-- output # 最终输出得到的博客网页 |-- pelicanconf.py # 整个博客生成过程中最重要的配置文件 |-- publishconf.py # 发布用的配置文件 pelican ./content -s ./pelicanconf.py #生成博客，最终可以再output目录下看到博客网页，由于本地上没有make命令，又不想折腾cygwin 上述的操作就可以生成一个可以正常访问的网站，但是还有做一些美化的工作，其中包括了更换主题、添加评论以及使用一些特定功能的插件等等，而所有的这些功能的实现均是在配置文件pelicanconf.py中实现，因此该文件的重要性毋庸置疑。 配置文件 pelicanconf.py中的配置选项较多，包括作者信息、URL信息、时区、日期、语言等等，由于自己也是刚刚接触，再加上英文水平太水，所以很多地方被弄得不明不白，但 Pelican官方文档 中给出了最全面的配置解释，需要了解的时候可以去看看。 以下是自己参考了别人得到的配置文件： # !/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals AUTHOR = u'XieFeng' SITENAME = u\"XF BLOG\" SITEURL = 'http://xiefeng6640.github.io' THEME = \"theme/elegant\" TIMEZONE = 'Asia/Shanghai' DEFAULT_LANG = u'zh' DEFAULT_DATE_FORMAT = '%Y-%m- %d %H:%M:%S' DEFAULT_DATE = 'fs' FILENAME_METADATA = '(?P<slug>.*)' #URL USE_FOLDER_AS_CATEGORY = True PATH = './content' STATIC_PATHS = [ './images' , 'images' ] #ARTICLE_PATHS = ['articles'] ARTICLE_URL = 'articles/{category}/{date:%Y}/{slug}.html' ARTICLE_SAVE_AS = ARTICLE_URL PAGE_URL = 'pages/{slug}.html' PAGE_SAVE_AS = PAGE_URL CATEGORY_URL = 'categories/{slug}/index.html' TAG_URL = 'tag/{slug}.html' MD_EXTENSIONS = [ 'codehilite(css_class=highlight)' , 'extra' , 'headerid' , 'toc' ] DIRECT_TEMPLATES = (( 'index' , 'tags' , 'categories' , 'archives' , 'search' , '404' )) TAG_SAVE_AS = '' CATEGORY_SAVE_AS = '' AUTHOR_SAVE_AS = '' DEFAULT_PAGINATION = 10 # 邮件联系Mailchimp ''' EMAIL_SUBSCRIPTION_LABEL = u'Get Monthly Updates' EMAIL_FIELD_PLACEHOLDER = u'Enter your email...' SUBSCRIBE_BUTTON_TITLE = u'Send me Free updates' MAILCHIMP_FORM_ACTION = u'empty' ''' #评论 SITEURL = 'http://xiefeng6640.github.io' DISQUS_SITENAME = 'your shortname' PLUGIN_PATHS = [ 'plugins' ] PLUGINS = [ 'sitemap' , 'extract_toc' , 'tipue_search' ] #用于被搜索引擎检索 SITEMAP = { \"format\" : \"xml\" , \"priorities\" : { \"articles\" : 0.7 , \"indexes\" : 0.5 , \"pages\" : 0.3 , }, \"changefreqs\" : { \"articles\" : \"monthly\" , \"indexes\" : \"daily\" , \"pages\" : \"monthly\" , } } LINKS = ( ( 'Pelican' , 'http://getpelican.com/' ), ( 'Python.org' , 'http://python.org/' ) ) # Social SOCIAL = ( ( 'Github' , 'https://github.com/xiefeng6640/xiefeng6640.github.io.git' ), ( 'weibo' , 'http://weibo.com/u/1892384477' ), ( 'Email' , 'mailto:xiefeng6640@163.com' ), ) 更换主题 博客默认的主题一般比较简单，所以一般还要根据自己的喜好选择合适的主题，pelican提供了很多可以选择的主题，进入 http://pelicanthemes.com/ 可以预览主题效果，所有的 pelican-themes 托管在Github上。 我自己一向都有选择困难症，选择越多越纠结、越痛苦，在浏览这些主题的过程中，像 niu-x2 、 pelican-bootstrap3 、 tuxlite_tbs 以及自己使用的 elegant ，个人觉得都挺好，特别是有些主题还支持TOC，阅读文章的时候觉得顺心很多。 主题的修改只需要配置： THEME = \"theme/elegant\" #根据主题所在的路径进行修改 添加评论 Pelican可以使用国外的Disqus评论系统，自己需要到 Disqus 去申请账号，并记下对应的shortname，shortname可以在主页右上角的Setting->admin->settings->general菜单下的Site Identity查看得到。 DISQUS_SITENAME = 'your shortname' #填入你自己的shortname 假如想使用百度、新浪微博、豆瓣等国内账号的话，可以使用 多说 评论系统，由于评论一般都是出现在文章的末尾，因此修改/elegant/templates/article.html的内容，把 <!-- Duoshuo Comment Begin--> 和 <!-- Duoshuo Comment End--> 之前的代码放到文章末尾处。 <!-- Duoshuo Comment Begin--> {% if DUOSHUO_SITENAME and SITEURL and article.status ! = \"draft\" %} <div class= \"comments\" > <h2> Comments ! </h2> <div class= \"ds-thread\" ></div> <script type= \"text/javascript\" > var duoshuoQuery = {short_name:\" {{ DUOSHUO_SITENAME }} \"}; (function() { var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = 'http://static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); })(); </script> <noscript> Please enable JavaScript to view the comments. </noscript> {% endif %} <!-- Duoshuo Comment End--> </article> 最后还要在pelicanconf.py中设置多说的short_name DUOSHUO_SITENAME = 'your_short_name' 添加插件 Pelican提供了很多插件，可以去 Github插件库 中下载，根据对应插件的说明在配置文件中配置好即可，我这里暂时只用了三种插件， PLUGIN_PATHS = ['plugins'] #插件的源码位置 PLUGINS = ['sitemap', 'extract_toc','tipue_search'] #启用插件 其他 其他方面还有一些用于分享交流的链接之类了，这些都是在LINKS和SOCIAL字段中定义的。 4 博文撰写 博客的主体搭建好之后，开始写自己的博文了，本文使用MarkdownPad2作为编辑软件，根据自己的排版需求得到整洁干净的博文版面。 在content目录下新建一个.md文件，然后按照markdown语法，结合排版需求，可以很快得到很好看的博文。关于markdown的语法，可以参考 这里 ，以下是使用MarkdownPad2编辑的截图： 左侧属于编辑区，右侧属于预览区。 5 博客发布 现在自己还属于一枚学生党，暂时没钱去购买域名，所以只能利用Github提供的pages功能，把博客放到Giuhub上托管。 首先你得要有一个Githhub账号的，没有的就去 GitHub 注册吧；然后得新建一个仓库(repository)，该仓库的命名是有要求的，必须是username.github.io的格式，username是自己取的，否则的话无法访问博客。仓库建立好之后我们就可以把output目录下生成的文件上传到仓库上去了，上传成功之后，就可以在浏览器中输入http://username.github.io访问自己创建的博客了。关于git的一些命令可以参考 基础-远程仓库的使用 。 git上传文件的过程: git init #在output目录下创建仓库 git add . #增加当前目录下的文件到临时区 git status #查看仓库的变化 git commit -m \"your commit messages\" #提交工作区的修改内容 git remote add https://github.com/username./username..github.io.git #添加远程仓库 git push -u origin master #推送博客文件到远程仓库，后面将要输入github的用户名和密码 6 总结 往后在写博客的时候，主要按照以下流程就可以更新博客了： pelican ./content -s ./pelicanconf.py git add . git commit -m \"your commit messages\" git push origin master 总的来说，创建博客需要以下的几个步骤： 在windows、linux、mac下安装git、markdown、pelican、pip，还要注册GitHub、Disqus账号 通过pelican-quickstart生成一个博客原型，然后根据需求修改pelicanconf.py中的配置项，然后再运行make html或者pelican ./content -s ./pelicanconf.py生成博客 在content目录下用markdownpad2编辑博文，并更新 在git下把博客目录文件上传到Github远程仓库 到这里为止，一个博客已经基本成型了，还有很多地方需要自己慢慢去学习，慢慢去了解。 博客创建的过程中参考很多人的经验，对此非常感谢。 http://kevinyoung.gitcafe.io/articles/blog/build_your_blog.html http://www.xycoding.com/articles/2013/11/21/blog-create/ http://www.wengweitao.com/shi-yong-pelican-github-pagesda-jian-ge-ren-bo-ke.html http://oncrashreboot.com/elegant-best-pelican-theme-features#mailchimp http://docs.getpelican.com/en/3.3.0/getting_started.html#writing-content-using-pelican http://docs.getpelican.com/en/latest/settings.html http://nsec.sjtu.edu.cn/~syma/blog/pelican_duoshuo.html","tags":"学习笔记","title":"Window下基于Pelican搭建自己的博客"}]}